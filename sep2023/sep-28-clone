#  Cosmic Circuit - Clockwise

import math

def reward_function(params):
    # Read parameters from the `params` dictionary
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']
    steering_angle = params['steering_angle']
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']

    # Define heading_weight and steering_weight (you can adjust these)
    heading_weight = 2.0
    steering_weight = 3.0

    # Calculate track_direction based on closest waypoints
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)


    # Speed Reward
    if track_direction < 15:
        SPEED_THRESHOLD = 1.15  # Increase speed threshold for low track_direction
    elif track_direction >45:
        SPEED_THRESHOLD = 0.85  # Reduce speed threshold for high track_direction
    else:
        SPEED_THRESHOLD = 1.0

    if not all_wheels_on_track:
        speed_reward = 1e-3  # Penalize if the car goes off track
    elif speed < SPEED_THRESHOLD:
        speed_reward = 0.2  # Penalize if the car goes too slow
    else:
        speed_reward = 1.0  # High reward if the car stays on track and goes fast

    final_reward = speed_reward

    return float(final_reward)
